#!/usr/bin/env python3
# Utility script to generate a config for an Onion Service,
# suitable for running a container to host that service.
import argparse
import json
import yaml
import subprocess
import sys


k8s_config_map_template = {
    "apiVersion": "v1",
    "data": [],
    "kind": "ConfigMap",
    "metadata": {"name": "onion-service-config", "namespace": "default"},
}


def get_env_vars(onion_config):
    env_vars = {}
    env_vars["TOR_ONION_HOSTNAME"] = onion_config["onion_hostname"]
    env_vars["TOR_ONION_V3_PUBLIC_KEY"] = onion_config["onion_pubkey"]
    env_vars["TOR_ONION_V3_SECRET_KEY"] = onion_config["onion_privkey"]
    env_vars["TOR_ONION_REMOTE_PORT"] = "80"
    env_vars["WEB_FRONTEND_HOST"] = "onion-service-nginx.onion-demo.svc.cluster.local"
    return env_vars


def render_env_file(onion_config):
    env_vars = get_env_vars(onion_config)
    for k, v in env_vars.items():
        print("{}={}".format(k, v))


def render_config_map(onion_config):
    env_vars = get_env_vars(onion_config)
    config_map = k8s_config_map_template
    config_map["data"] = env_vars
    print("---")
    print(yaml.dump(config_map, indent=4, default_flow_style=False))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--format", action="store", default="env", choices=["env", "configmap"]
    )
    args = parser.parse_args()
    onion_config_s = subprocess.check_output(["tor-generate-onion"]).decode("utf-8")

    j = json.loads(onion_config_s)
    if args.format == "configmap":
        render_config_map(j)
    else:
        render_env_file(j)
