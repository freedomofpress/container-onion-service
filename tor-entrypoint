#!/bin/sh
# Runs a Tor Onion Service based on env vars.
# Intended for use in a container image.
set -e
set -u


echo "Tor config directory: ${TOR_ONION_NAME:=onion1}"
echo "Hidden service hostname: ${TOR_ONION_HOSTNAME?}"
echo "Hidden service port: ${TOR_ONION_REMOTE_PORT:=80}"
echo "Public key: ${TOR_ONION_V3_PUBLIC_KEY?}"
echo "Secret key: [not shown]"; : "${TOR_ONION_V3_SECRET_KEY?}"
echo "Backend host: ${WEB_FRONTEND_HOST?}"
echo "Backend port: ${WEB_FRONTEND_PORT:=80}"

tor_config_file="/var/lib/tor/torrc"
tor_service_dir="/var/lib/tor/${TOR_ONION_NAME}"
tor_client_auth_dir="${tor_service_dir}/authorized_clients"

mkdir -p "$tor_service_dir" "$tor_client_auth_dir"
chmod 2700 "$tor_service_dir" "$tor_client_auth_dir"

tor_pubkey="${tor_service_dir}/hs_ed25519_public_key"
tor_seckey="${tor_service_dir}/hs_ed25519_secret_key"

echo "$TOR_ONION_V3_PUBLIC_KEY" | base64 --decode > "$tor_pubkey"
echo "$TOR_ONION_V3_SECRET_KEY" | base64 --decode > "$tor_seckey"

chmod 0600 "$tor_seckey" "$tor_pubkey"

# If we volume-mounted client auth keys, they are here
cp /authorized_clients/*.auth "${tor_client_auth_dir}" || echo "Client auth is not enabled"

generate_config() {
    echo "HiddenServiceDir /var/lib/tor/${TOR_ONION_NAME}"
    echo "HiddenServicePort ${TOR_ONION_REMOTE_PORT} ${WEB_FRONTEND_HOST}:${WEB_FRONTEND_PORT}"
    echo "SocksPort 0"
}

echo "Generating config file..."
generate_config > "$tor_config_file"
echo "Verifying config file..."
tor -f "$tor_config_file" --verify-config
echo "Starting tor process..."
exec tor -f "$tor_config_file"
